// Arda Önal 2190330 Lab04 Code
module combined_traffic_light(input logic clk,reset,sa,sb,output logic [2:0] La, Lb);

    logic new_clock;
    
    clock_counter newclock(clk,reset,new_clock);
    
    traffic_light_system improved_fsm(new_clock,reset,sa,sb,La,Lb);
    
endmodule

module clock_counter(input clock, input reset, output logic new_clock);
    
    localparam risingEdgeNumber = 150000000;
    
    logic [31:0] count;
 
    always @ (posedge(clock), posedge(reset))
    begin
        if (reset == 1'b1)
            count <= 32'b0;
        else if (count == risingEdgeNumber - 1)
            count <= 32'b0;
        else
            count <= count + 1;
    end

    always @ (posedge(clock), posedge(reset))
    begin
        if (reset == 1'b1)
            new_clock <= 1'b0;
        else if (count == risingEdgeNumber - 1)
            new_clock <= ~new_clock;
        else
            new_clock <= new_clock;
    end
endmodule

module traffic_light_system(input logic clk,reset,sa,sb,output logic [2:0] La, Lb);
    typedef enum logic [2:0] {S0, S1, S2, S3, S4, S5, S6, S7} statetype;
    statetype state, nextstate;
    
    // state register
    always_ff @(posedge clk, posedge reset)
    if (reset) state <= S0;
    else state <= nextstate;
    
    // next state logic
    always_comb
        case (state)
        S0: if (sa) nextstate = S0;
            else nextstate = S1;
        S1: nextstate = S2;
        S2: nextstate = S3;
        S3: nextstate = S4;
        S4: if (sb) nextstate = S4;
            else nextstate = S5;
        S5: nextstate = S6;
        S6: nextstate = S7;
        S7: nextstate = S0;
        default: nextstate = S0;
    endcase
    
    // output logic
    logic n0;
    logic n1;
    xor(n0,state[1],state[2]);
    xnor(n1,state[1],state[2]);
    
    assign La[2] = n0 | (state[1] & ~state[0]);
    assign La[1] = n0 | ~state[0];
    assign La[0] = 1;
    
    assign Lb[2] = n1 | (~state[2] & ~state[0]);
    assign Lb[1] = n1 | ~state[0];
    assign Lb[0] = 1;
endmodule

module testbench_traffic();
    logic clk,reset,sa,sb;
    logic [2:0] La, Lb;
    
    // instantiate device under test
    traffic_light_system dut(clk,reset,sa,sb,La,Lb);
    
    // clock
    always
        begin
        clk = 1; #5;
        clk = 0; #5;
        end
     
    // apply inputs one at a time
    initial begin
        reset = 1; sa= 1; sb = 0; #10;
        reset = 0; #100; 
        sb = 1; #100;
        sa = 0; #100;
        sa = 0; sb = 0; #100;
    end      
endmodule